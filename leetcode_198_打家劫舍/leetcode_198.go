package leetcode_198_打家劫舍

/*
你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统
如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。

给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。

示例 1:
输入: [1,2,3,1]
输出: 4
解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
     偷窃到的最高金额 = 1 + 3 = 4 。

示例 2:
输入: [2,7,9,3,1]
输出: 12
解释: 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
     偷窃到的最高金额 = 2 + 9 + 1 = 12 。
*/

/*
不相邻的最大和
*/

/*
动态规划
转移方程：dp[i] = max(dp[i-1], dp[i-2]+nums[i-1])
*/
func rob(nums []int) int {
	// 没人抢毛？
	if nums == nil || len(nums) <= 0 {
		return 0
	}
	// 两家抢最大！
	if len(nums) == 2 {
		return max(nums[0], nums[1])
	}
	var dp = make([]int, len(nums)+1)
	dp[0] = -1
	dp[1] = nums[0]               // 抢
	dp[2] = max(nums[0], nums[1]) // 抢多的
	for i := 3; i <= len(nums); i++ {
		// dp[i-1]：不抢，维持前一家的值
		// dp[i-2]+nums[i-1]： 抢这家，但是不连续抢，所以是选择抢前两家+这家
		dp[i] = max(dp[i-1], dp[i-2]+nums[i-1])
	}
	return dp[len(nums)]
}

func max(a, b int) int {
	if a > b {
		return a
	}
	return b
}
