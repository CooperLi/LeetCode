package leetcode_1470_一维数组的动态和

/*
给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。
请返回 nums 的动态和。

示例 1：
输入：nums = [1,2,3,4]
输出：[1,3,6,10]
解释：动态和计算过程为 [1, 1+2, 1+2+3, 1+2+3+4] 。

示例 2：
输入：nums = [1,1,1,1,1]
输出：[1,2,3,4,5]
解释：动态和计算过程为 [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1] 。

示例 3：
输入：nums = [3,1,2,10,1]
输出：[3,4,6,16,17]

提示：
1 <= nums.length <= 1000
-10^6 <= nums[i] <= 10^6
*/

/*
思考：
原地变换，挨个相加，上一个已经是处理好的结果了，所以我们只需要加这个位置的下一个元素，然后把它赋值给当前所在元素即可。
不需要考虑再创建一个数组来保存了, 很精妙。
*/
func runningSum(nums []int) []int {
	for i := 1; i < len(nums); i++ {
		nums[i] += nums[i-1]
	}
	return nums
}
