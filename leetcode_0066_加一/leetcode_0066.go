package leetcode_0066_加一

/*
给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。
最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。
你可以假设除了整数 0 之外，这个整数不会以零开头。

示例 1:
输入: [1,2,3]
输出: [1,2,4]
解释: 输入数组表示数字 123。

示例 2:
输入: [4,3,2,1]
输出: [4,3,2,2]
解释: 输入数组表示数字 4321。
*/

/*
思考：
考虑进位，从数组最后一位开始往前遍历
如果遇到9的，那么+1之后变10，所以该位置写0，并继续往前走，
如果走到数组index=0的地方，说明走完了，则扩展数组，然后跳过本次循环
其他情况如果遇见非9的数字，然后在该位置+1
*/
func plusOne(digits []int) []int {
	for i := len(digits) - 1; i >= 0; i-- {
		if digits[i] == 9 {
			digits[i] = 0
			if i == 0 {
				digits = append([]int{1}, digits...)
			}
			continue
		} else {
			digits[i]++
			break
		}
	}

	return digits
}
