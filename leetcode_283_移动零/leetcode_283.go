package leetcode_283_移动零

/*
给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。

示例:
输入: [0,1,0,3,12]
输出: [1,3,12,0,0]
说明:

必须在原数组上操作，不能拷贝额外的数组。
尽量减少操作次数。
*/

// 快速排序，选择一个数，比这个数小的放左边，比数大的放右边。
// 这里可以改变判断条件：不等于0的放左边，等于0的放右边
// 使用快慢指针，只要nums[i] != 0, 交换 nums[i] 和 nums[j]
func moveZeroes(nums []int) {
	if nums == nil {
		return
	}

	// j 为慢指针，永远指向第一个0，用来和i指向的非0数字交换
	var j int
	for i := 0; i < len(nums); i++ {
		// 如果i也遇到了0，那么直接跳过，直到遇见第一个非0的数字
		if nums[i] == 0 {
			continue
		}
		// 然后和j指向的0互换
		nums[i], nums[j] = nums[j], nums[i]
		// 接着j指向的就不是非0的数字了，所以往后移动一位
		j++
	}
}
