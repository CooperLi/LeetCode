package leetcode_0011_盛最多水的容器

/*
给定 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。

说明：你不能倾斜容器，且 n 的值至少为 2。



图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。
.............................................................................................................
.............................................................................................................
.............................................................................................................
.............................................................................................................
................***.......................................................***................................
................***.......................................................***................................
................***.......................................................***................................
................***.......................................................***....................***.........
................***.......................................................***....................***.........
................***.......................................................***....................***.........
................***...........**..........................................***....................***.........
................***...........**..........................................***....................***.........
................***...........**..........................................***....................***.........
................***...........**....................***...................***....................***.........
................***...........**....................***...................***....................***.........
................***...........**....................***........***........***....................***.........
................***...........**....................***........***........***....................***.........
................***...........**....................***........***........***....................***.........
................***...........**....................***........***........***.........**.........***.........
................***...........**....................***........***........***.........**.........***.........
................***...........**....................***........***........***.........**.........***.........
................***...........**.........**.........***........***........***.........**.........***.........
................***...........**.........**.........***........***........***.........**.........***.........
................***...........**.........**.........***........***........***.........**.........***.........
.......**.......***...........**.........**.........***........***........***.........**.........***.........
.......**.......***...........**.........**.........***........***........***.........**.........***.........
.......**.......***...........**.........**.........***........***........***.........**.........***.........


示例:
输入: [1,8,6,2,5,4,8,3,7]
输出: 49

*/

/*
首尾指针
计算包括的面积，每次比较"目前的面积" 和 "之前保存的面积"
每次指针都向着大的一侧移动，这样确保面积最大
*/
func maxArea(height []int) int {
	size := len(height)
	start, end := 0, size-1
	area := 0
	for start < end {
		// 左低右高往右走
		if height[start] < height[end] {
			// 高*宽=面积
			area = max(area, height[start]*(end-start))
			start++
		} else { // 用else就包括了左右相等的情况，也就是默认右边往左移动
			area = max(area, height[end]*(end-start))
			end--
		}
	}
	return area
}

func max(a, b int) int {
	if a > b {
		return a
	}
	return b
}
